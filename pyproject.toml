# =============================================================================
# NeoMate AI - Poetry Project Configuration
# =============================================================================
# Comprehensive pyproject.toml for NeoMate AI Assistant
# Compatible with Poetry for dependency management and packaging
# Includes all necessary configurations for development, testing, and deployment
# Last Updated: 2024
# =============================================================================

[tool.poetry]
name = "neomate-ai"
version = "0.1.0"
description = "A highly advanced, offline-first, open-source AI assistant that controls computers like humans through voice, vision, and automation."
authors = ["NeoMate AI Team <team@neomate.ai>"]
maintainers = ["NeoMate AI Team <team@neomate.ai>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/emonhmamun/NeoMate-Ai-Assistant"
repository = "https://github.com/emonhmamun/NeoMate-Ai-Assistant"
documentation = "https://NeoMate-Ai-Assistant.readthedocs.io/"
keywords = [
    "ai",
    "assistant",
    "voice",
    "automation",
    "computer-vision",
    "nlp",
    "offline",
    "open-source",
    "machine-learning",
    "speech-recognition",
    "screen-capture",
    "productivity"
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Multimedia :: Sound/Audio :: Speech",
    "Topic :: Multimedia :: Video",
    "Topic :: System :: Monitoring",
    "Topic :: Utilities",
    "Topic :: Desktop Environment",
    "Framework :: PyTorch",
]
packages = [{include = "src"}]
include = [
    "config/*.yaml",
    "data/models/*",
    "src/ui/assets/*",
    "scripts/*",
    "deployment/*"
]
exclude = [
    "tests/*",
    "docs/_build/*",
    "data/user_data/*",
    "logs/*",
    ".git/*",
    "__pycache__/*"
]

[tool.poetry.dependencies]
python = "^3.11"
# Core AI and Machine Learning
torch = "^2.0.0"
torchvision = "^0.15.0"
torchaudio = "^2.0.0"
transformers = "^4.30.0"
accelerate = "^0.20.0"
bitsandbytes = "^0.41.0"

# Audio Processing and Speech
pyaudio = "^0.2.13"
pvporcupine = "^3.0.0"
faster-whisper = "^1.0.0"
pyannote-audio = "^3.0.0"
webrtcvad = "^2.0.10"
speechbrain = "^0.5.16"
piper-tts = "^1.2.0"


# Vision and Computer Vision
opencv-python = "^4.8.0"
easyocr = "^1.7.0"
ultralytics = "^8.0.0"
mss = "^9.0.0"
pillow = "^9.0.0"

# Automation and Input Control
pyautogui = "^0.9.54"
pynput = "^1.7.6"

# System Monitoring and Utilities
psutil = "^5.9.0"
pyyaml = "^6.0"
loguru = "^0.7.0"
pydantic = "^2.0.0"
rich = "^13.0.0"
plyer = "^2.1.0"
py-cpuinfo = "^9.0.0"

# Networking and Web Interaction
httpx = "^0.25.0"
aiohttp = "^3.8.0"
requests = "^2.31.0"
beautifulsoup4 = "^4.12.0"
duckduckgo-search = "^3.8.0"
searxng = "^0.1.0"

# Database and Search
chromadb = "^0.4.0"
tinydb = "^4.8.0"
meilisearch = "^0.28.0"
faiss-cpu = "^1.7.0"

# Local Large Language Models
llama-cpp-python = "^0.2.0"

# Natural Language Processing and LangChain
# langchain = "^0.0.300"
# langchain-core = "^0.1.0"
# langchain-community = "^0.0.10"
# sentence-transformers = "^2.2.0"

# Platform Specific Dependencies
# pywin32 = {version = "^306", markers = "sys_platform == 'win32'"}
# python-xlib = {version = "^0.33", markers = "sys_platform == 'linux'"}
# pycaw = {version = "^20230407", markers = "sys_platform == 'win32'"}
# pyalsaaudio = {version = "^0.10.0", markers = "sys_platform == 'linux'"}

# User Interface
# pyside6 = {version = "^6.5.0", python = ">=3.9,<3.13"}

# Packaging and Distribution
# pyinstaller = "^6.0.0"

# Additional Utilities
# numpy = "^1.24.0"
# scipy = "^1.10.0"
# pandas = "^1.5.0"
# matplotlib = "^3.6.0"
# seaborn = "^0.12.0"

[tool.poetry.group.dev.dependencies]
# Testing
# pytest = "^7.4.0"
# pytest-asyncio = "^0.21.0"
# pytest-cov = "^4.1.0"
# pytest-mock = "^3.10.0"
# pytest-xdist = "^3.3.0"

# Code Quality and Linting
# black = "^23.7.0"
# isort = "^5.12.0"
# ruff = "^0.0.285"
# mypy = "^1.0.0"
# pre-commit = "^3.4.0"
# flake8 = "^6.0.0"

# Documentation
# sphinx = "^7.0.0"
# sphinx-rtd-theme = "^3.0.0"


# Development Tools

# Performance and Profiling

[tool.poetry.group.docs.dependencies]
# sphinx = "^7.0.0"
# sphinx-rtd-theme = "^3.0.0"



[tool.poetry.scripts]
neomate = "src.main:main"
neomate-install = "scripts.install_dependencies:main"
neomate-build = "scripts.build:main"
neomate-health = "scripts.health_check:main"
neomate-update-models = "scripts.update_models:main"
neomate-test = "tests.test_coverage:main"

[[tool.poetry.source]]
name = "llama-cpp"
url = "https://abetlen.github.io/llama-cpp-python/whl/cpu"
priority = "primary"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

# =============================================================================
# DEVELOPMENT TOOL CONFIGURATIONS
# =============================================================================

[tool.black]
line-length = 88
target-version = ['py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \\.eggs
  | \\.git
  | \\.hg
  | \\.mypy_cache
  | \\.tox
  | \\.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["src"]
known_third_party = [
    "torch",
    "transformers",
    "langchain",
    "pydantic",
    "fastapi",
    "uvicorn"
]
force_sort_within_sections = true
force_single_line = false

[tool.ruff]
line-length = 88
target-version = "py311"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "N",  # pep8-naming
    "YTT", # flake8-2020
    "S",  # flake8-bandit
    "BLE", # flake8-blind-except
    "FBT", # flake8-boolean-trap
    "A",  # flake8-builtins
    "COM", # flake8-commas
    "C90", # mccabe
    "DJ",  # flake8-django
    "EM",  # flake8-errmsg
    "EXE", # flake8-executable
    "FA",  # flake8-future-annotations
    "ISC", # flake8-implicit-str-concat
    "ICN", # flake8-import-conventions
    "G",  # flake8-logging-format
    "INP", # flake8-no-pep420
    "PIE", # flake8-pie
    "T10", # flake8-debugger
    "T20", # flake8-print
    "PYI", # flake8-pyi
    "PT",  # flake8-pytest-style
    "Q",  # flake8-quotes
    "RSE", # flake8-raise
    "RET", # flake8-return
    "SLF", # flake8-self
    "SLOT", # flake8-slots
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
    "TCH", # flake8-type-checking
    "INT", # flake8-gettext
    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
    "ERA", # flake8-eradicate
    "PD",  # pandas-vet
    "PGH", # pygrep-hooks
    "PL",  # pylint
    "TRY", # tryceratops
    "FLY", # flynt
    "NPY", # numpy-deprecated
    "AIR", # airflow
    "PERF", # perflint
    "FURB", # refurb
    "LOG", # flake8-logging
    "RUF", # ruff-specific rules
]
ignore = [
    "E501", # line too long, handled by black
    "B008", # do not perform function calls in argument defaults
    "C901", # too complex
    "PLR0913", # too many arguments
    "PLR0912", # too many branches
    "PLR0915", # too many statements
    "PLR2004", # magic value comparison
    "S101", # assert used
    "T20", # print used (allowed in development)
    "FBT001", # boolean positional arg in function definition
    "FBT002", # boolean default positional argument
    "FBT003", # boolean positional value in function call
    "A003", # class attribute shadows a python builtin
    "COM812", # trailing comma missing
    "ISC001", # implicitly concatenated string literals
    "Q000", # single quotes found but double quotes preferred
    "Q001", # single quote multiline found but double quotes preferred
    "Q002", # single quote docstring found but double quotes preferred
    "Q003", # change outer quotes to avoid escaping inner quotes
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["B011", "S101", "PLR2004"]
"scripts/**/*" = ["T20", "S101"]
"src/ui/**/*" = ["N802", "N803"]
"docs/**/*" = ["INP001"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]

[[tool.mypy.overrides]]
module = [
    "pyautogui.*",
    "pyaudio.*",
    "pvporcupine.*",
    "speechbrain.*",
    "coqui_tts.*",
    "ultralytics.*",
    "easyocr.*",
    "mss.*",
    "plyer.*",
    "pynput.*",
    "pycaw.*",
    "pyalsaaudio.*",
    "pyside6.*",
    "pywin32.*",
    "python_xlib.*",
    "llama_cpp.*",
    "chromadb.*",
    "meilisearch.*",
    "duckduckgo_search.*",
    "searxng.*",
    "rnnoise.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "-q",
    "--cov=src",
    "--cov-report=html",
    "--cov-report=term-missing",
    "--cov-report=xml",
    "--strict-markers",
    "--disable-warnings",
    "--tb=short"
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "e2e: End-to-end tests",
    "slow: Slow running tests",
    "gpu: Tests requiring GPU",
    "audio: Audio-related tests",
    "vision: Vision-related tests",
    "automation: Automation tests"
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::UserWarning",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/__pycache__/*",
    "*/.tox/*",
    "*/build/*",
    "*/dist/*",
    "src/ui/*",  # UI code often hard to test
    "scripts/*",  # Scripts may not need coverage
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    'if __name__ == \\.__main__\\.:',
    'class .*\\bProtocol\\):',
    '@(abc\\.)?abstractmethod',
    'logger\\.(debug|info|warning|error|critical)',
    "raise NotImplementedError",
    "pass",
    "raise ImportError",
    "except ImportError:",
]

[tool.tox]
legacy_tox_ini = """
[tox]
envlist = py311, py312
skip_missing_interpreters = true

[testenv]
deps = poetry
commands =
    poetry install
    poetry run pytest
"""

# =============================================================================
# NOTES
# =============================================================================
# - Install dependencies: poetry install
# - Run tests: poetry run pytest
# - Build package: poetry build
# - Publish: poetry publish
# - Format code: poetry run black src/
# - Lint code: poetry run ruff check src/
# - Type check: poetry run mypy src/
#
# For development:
# - Use poetry shell to activate virtual environment
# - Add new dependencies: poetry add <package>
# - Add dev dependencies: poetry add --group dev <package>
# =============================================================================
