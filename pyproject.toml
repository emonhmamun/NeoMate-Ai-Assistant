[tool.poetry]
name = "neomate-ai"
version = "0.1.0"
description = "A highly advanced, offline-first, open-source AI assistant that controls computers like humans through voice, vision, and automation."
maintainers = ["NeoMate AI Team <team@neomate.ai>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/emonhmamun"
repository = "https://github.com/emonhmamun/NeoMate-Ai-Assistant"
documentation = "https://NeoMate-Ai-Assistant.readthedocs.io/"
keywords = ["ai", "assistant", "voice", "automation", "computer-vision", "nlp", "offline", "open-source"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Multimedia :: Sound/Audio :: Speech",
    "Topic :: Multimedia :: Video",
    "Topic :: System :: Monitoring",
    "Topic :: Utilities",
]
packages = [{include = "src"}]
include = ["config/*.yaml", "data/models/*", "src/ui/assets/*"]

[tool.poetry.dependencies]
python = ">=3.11,<3.14"
# Core AI and ML
torch = "^2.0.0"
torchvision = "^0.15.0"
torchaudio = "^2.0.0"
transformers = "^4.30.0"
# Audio Processing
pyaudio = "^0.2.13"
pvporcupine = "^3.0.0"
faster-whisper = "^0.10.0"
pyannote-audio = "^3.0.0"
webrtcvad = "^2.0.10"
speechbrain = "^0.5.16"
coqui-tts = "^0.27.2"
# Vision and OCR
opencv-python = "^4.8.0"
easyocr = "^1.7.0"
ultralytics = "^8.0.0"
mss = "^9.0.0"
# Automation
pyautogui = "^0.9.54"
pynput = "^1.7.6"
# System and Utils
psutil = "^5.9.0"
pyyaml = "^6.0"
loguru = "^0.7.0"
pydantic = "^2.0.0"
rich = "^13.0.0"
plyer = "^2.1.0"
aiohttp = "^3.8.0"
requests = "^2.31.0"
beautifulsoup4 = "^4.12.0"
duckduckgo-search = "^3.8.0"
# Database and Search
chromadb = "^0.4.0"
tinydb = "^4.8.0"
meilisearch = "^0.28.0"
# Local LLM
llama-cpp-python = "^0.2.0"
# NLP and LangChain
langchain = "^0.0.300"
# Platform Specific
pywin32 = {version = "^306", markers = "sys_platform == 'win32'"}
python-xlib = {version = "^0.33", markers = "sys_platform == 'linux'"}
pycaw = {version = "^20230407", markers = "sys_platform == 'win32'"}
pyalsaaudio = {version = "^0.10.0", markers = "sys_platform == 'linux'"}
# UI
pyside6 = "^6.5.0"
# Optional for advanced features
py-cpuinfo = "^9.0.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.0"
pytest-asyncio = "^0.21.0"
pytest-cov = "^4.1.0"
black = "^23.7.0"
isort = "^5.12.0"
ruff = "^0.0.285"
mypy = "^1.5.0"
pre-commit = "^3.4.0"
tox = "^4.6.0"
sphinx = "^7.0.0"
sphinx-rtd-theme = "^1.3.0"

[tool.poetry.scripts]
neomate = "src.main:main"
neomate-install = "scripts.install_dependencies:main"
neomate-build = "scripts.build:main"
neomate-health = "scripts.health_check:main"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["src"]
known_third_party = ["torch", "transformers", "langchain"]

[tool.ruff]
line-length = 88
target-version = "py310"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501", # line too long, handled by black
    "B008", # do not perform function calls in argument defaults
    "C901", # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["B011"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "pyautogui.*",
    "pyaudio.*",
    "pvporcupine.*",
    "speechbrain.*",
    "coqui_tts.*",
    "ultralytics.*",
    "easyocr.*",
    "mss.*",
    "plyer.*",
    "pynput.*",
    "pycaw.*",
    "pyalsaaudio.*",
    "pyside6.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --cov=src --cov-report=html --cov-report=term-missing"
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
